#Использовать asserts
#Использовать logos
#Использовать "../src/core"

Перем юТест;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт
	
	юТест = Тестирование;
	
	Тесты = Новый Массив;
	
	Тесты.Добавить("ТестДолжен_ЗаписатьМанифестВXML");
	Тесты.Добавить("ТестДолжен_ЗаписатьМетаданныеВXML");
	Тесты.Добавить("ТестДолжен_ПрочитатьМанифестИзXML");
	
	Возврат Тесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

Функция СоздатьТестовыйМанифест()
	
	Манифест = Новый ОписаниеПакета();
	Манифест.Имя("mft-test")
		.Автор("Я")
		.Версия("1.0.5")
		.ВерсияСреды("1.0")
		.ВерсияМанифеста("1.0")
		.Описание("Это пакет для тестирования")
		.АдресАвтора("mail@server.com")
		.АдресРепозитория("https://github.com/oscript-library/mypackage")
		.ЗависитОт("asserts")
		.ЗависитОт("cmdline",">=2.1","<3.0")
		.РазработкаЗависитОт("logos")
		.Задачи("tasks")
		.ВключитьФайл("src")
		.ВключитьФайл("tests")
		.ОпределяетМодуль("Модуль1", "src/m1.os")
		.ОпределяетМодуль("Модуль2", "src/m2.os")
		.ОпределяетКласс("Класс1", "src/class1.os")
		.ОпределяетКласс("Класс2", "src/class2.os")
		.ИсполняемыйФайл("src/app1.os")
		.ИсполняемыйФайл("src/app2.os");
		
	Возврат Манифест;
	
КонецФункции

Процедура ЗаписатьМанифест(Знач Запись, Знач Манифест)
	Сериализатор = Новый СериализацияМетаданныхПакета;
	Сериализатор.ЗаписатьXML(Запись, Манифест);
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьМанифестВXML() Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	ЗаписатьМанифест(Запись, СоздатьТестовыйМанифест());
	
	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ВК + Символы.ПС, Символы.ПС);
	Результат = СтрЗаменить(Результат, " />", "/>");

	Эталон = 
	"<?xml version=""1.0"" encoding=""utf-8""?>
	|<opm-metadata xmlns=""http://oscript.io/schemas/opm-metadata/1.0"">
	|    <name>mft-test</name>
	|    <author>Я</author>
	|    <version>1.0.5</version>
	|    <engine-version>1.0</engine-version>
	|    <manifest-version>1.0</manifest-version>
	|    <description>Это пакет для тестирования</description>
	|    <author-email>mail@server.com</author-email>
	|    <repo-address>https://github.com/oscript-library/mypackage</repo-address>
	|    <tasks>tasks</tasks>
	|    <depends-on name=""asserts"" dev=""false""/>
	|    <depends-on name=""cmdline"" dev=""false"" version=""&gt;=2.1"" version-max=""&lt;3.0""/>
	|    <depends-on name=""logos"" dev=""true""/>
	|    <executable>src/app1.os</executable>
	|    <executable>src/app2.os</executable>
	|    <include-content>src</include-content>
	|    <include-content>tests</include-content>
	|    <explicit-modules>
	|        <module name=""Модуль1"" src=""src/m1.os""/>
	|        <module name=""Модуль2"" src=""src/m2.os""/>
	|        <class name=""Класс1"" src=""src/class1.os""/>
	|        <class name=""Класс2"" src=""src/class2.os""/>
	|    </explicit-modules>
	|</opm-metadata>";
	
	Утверждения.ПроверитьРавенство(Эталон, Результат);

КонецПроцедуры

Процедура ТестДолжен_ЗаписатьМетаданныеВXML() Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Сериализатор = Новый СериализацияМетаданныхПакета;
	Сериализатор.ЗаписатьМетаданныеВXML(Запись, СоздатьТестовыйМанифест());
	
	Результат = СтрЗаменить(Запись.Закрыть(), Символы.ВК+Символы.ПС, Символы.ПС);
	Результат = СтрЗаменить(Результат, " />", "/>");

	Эталон = 
	"<?xml version=""1.0"" encoding=""utf-8""?>
	|<opm-metadata xmlns=""http://oscript.io/schemas/opm-metadata/1.0"">
	|    <name>mft-test</name>
	|    <author>Я</author>
	|    <version>1.0.5</version>
	|    <engine-version>1.0</engine-version>
	|    <manifest-version>1.0</manifest-version>
	|    <description>Это пакет для тестирования</description>
	|    <author-email>mail@server.com</author-email>
	|    <repo-address>https://github.com/oscript-library/mypackage</repo-address>
	|    <tasks>tasks</tasks>
	|    <depends-on name=""asserts"" dev=""false""/>
	|    <depends-on name=""cmdline"" dev=""false"" version=""&gt;=2.1"" version-max=""&lt;3.0""/>
	|    <depends-on name=""logos"" dev=""true""/>
	|    <executable>src/app1.os</executable>
	|    <executable>src/app2.os</executable>
	|</opm-metadata>";
	
	Утверждения.ПроверитьРавенство(Эталон, Результат);

КонецПроцедуры

Процедура ТестДолжен_ПрочитатьМанифестИзXML() Экспорт
	
	Манифест = СоздатьТестовыйМанифест();
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ЗаписатьМанифест(Запись, Манифест);
	Текст = Запись.Закрыть();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	
	Сериализатор = Новый СериализацияМетаданныхПакета();
	ПрочитанныйМанифест = Сериализатор.ПрочитатьXML(Чтение);
	
	Утверждения.ПроверитьРавенство(Тип("ОписаниеПакета"), ТипЗнч(ПрочитанныйМанифест), "Сравниваем типы до и после сериализации");
	
	СвойстваИсходного    = Манифест.Свойства();
	СвойстваПрочитанного = ПрочитанныйМанифест.Свойства();
	
	Утверждения.ПроверитьРавенство(СвойстваИсходного.Количество(), СвойстваПрочитанного.Количество(), "Количество свойств");
	Для Каждого КЗ Из СвойстваИсходного Цикл
		Утверждения.ПроверитьРавенство(КЗ.Значение, СвойстваПрочитанного[КЗ.Ключ], "Проверка свойства " + КЗ.Ключ);
	КонецЦикла;
	
	ЗависимостиИсходного = Манифест.Зависимости();
	ЗависимостиПроверяемого = ПрочитанныйМанифест.Зависимости();
	
	Утверждения.ПроверитьИстину(ТаблицыЗначенийИдентичны(ЗависимостиИсходного, ЗависимостиПроверяемого));
	
	ПриложенияИсходного = Манифест.ИсполняемыеФайлы();
	ПриложенияПрочитанного = ПрочитанныйМанифест.ИсполняемыеФайлы();
	
	Утверждения.ПроверитьРавенство(ПриложенияИсходного.Количество(), ПриложенияПрочитанного.Количество());
	Для Сч = 0 По ПриложенияИсходного.Количество()-1 Цикл
		Утверждения.ПроверитьРавенство(ПриложенияИсходного[Сч].Путь, ПриложенияПрочитанного[Сч].Путь, "Приложение в строке " + Сч);
	КонецЦикла;
	
	МодулиИсходного = Манифест.ВсеМодулиПакета();
	МодулиПрочитанного = ПрочитанныйМанифест.ВсеМодулиПакета();
	
	Утверждения.ПроверитьИстину(ТаблицыЗначенийИдентичны(МодулиИсходного, МодулиПрочитанного));
	
КонецПроцедуры

Функция ТаблицыЗначенийИдентичны(Знач Исходная, Знач Проверяемая)
	
	Утверждения.ПроверитьРавенство(Исходная.Количество(), Проверяемая.Количество(), "Количество строк должно быть равным");
	Утверждения.ПроверитьРавенство(Исходная.Колонки.Количество(), Проверяемая.Колонки.Количество(), "Количество колоно должно быть равным");
	
	Для Сч = 0 По Исходная.Количество()-1 Цикл
		СтрокаИсходной    = Исходная[Сч];
		СтрокаПроверяемой = Проверяемая[Сч];
		
		Для Каждого Колонка Из Исходная.Колонки Цикл
			Утверждения.ПроверитьРавенство(СтрокаИсходной[Колонка.Имя], СтрокаПроверяемой[Колонка.Имя], "Проверяем равенство " + Колонка.Имя + " в строке " + Сч);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Логирование.ПолучитьЛог("oscript.app.opm").УстановитьУровень(УровниЛога.Отладка);
