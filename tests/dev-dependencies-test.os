#Использовать asserts
#Использовать "../src/core"

Перем юТест;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт
	
	юТест = Тестирование;
	
	Тесты = Новый Массив;
	
	Тесты.Добавить("ТестДолжен_ФильтроватьЗависимостиБезФлагаРазработчика");
	Тесты.Добавить("ТестДолжен_ВключатьЗависимостиРазработчикаСФлагом");
	Тесты.Добавить("ТестДолжен_ИсключатьЗависимостиРазработчикаНаВложенныхУровнях");
	Тесты.Добавить("ТестДолжен_РаботатьСЛокальнымиЗависимостями");
	
	Возврат Тесты;
	
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
КонецПроцедуры

Функция СоздатьТестовыйМанифест()
	
	Манифест = Новый ОписаниеПакета();
	Манифест.Имя("test-dev-deps")
		.Версия("1.0.0")
		.ВерсияСреды("1.9.2")
		.ЗависитОт("regular-dep1", "1.0.0")
		.ЗависитОт("regular-dep2", "2.0.0")
		.РазработкаЗависитОт("dev-dep1", "1.0.0")
		.РазработкаЗависитОт("dev-dep2", "2.0.0");
		
	Возврат Манифест;
	
КонецФункции

Процедура ТестДолжен_ФильтроватьЗависимостиБезФлагаРазработчика() Экспорт
	
	// Arrange
	Манифест = СоздатьТестовыйМанифест();
	МенеджерУстановки = Новый МенеджерУстановкиПакетов(РежимУстановкиПакетов.Локально);
	МенеджерУстановки.УстанавливатьЗависимостиРазработчика(Ложь);
	
	// Act - имитируем логику фильтрации из РазрешитьЗависимостиПакета
	ВсеЗависимости = Манифест.Зависимости();
	УстанавливатьЗависимостиРазработчика = Ложь;
	УровеньЗависимости = 0;
	
	// Применяем логику фильтрации как в исправленном коде
	Отбор = Новый Структура();
	Отбор.Вставить("ДляРазработки", Ложь);
	
	Зависимости = ВсеЗависимости.НайтиСтроки(Отбор);
	
	Если УстанавливатьЗависимостиРазработчика И УровеньЗависимости = 0 Тогда
		Отбор.ДляРазработки = Истина;
		ЗависимостиРазработчика = ВсеЗависимости.НайтиСтроки(Отбор);
		Для Каждого Зависимость Из ЗависимостиРазработчика Цикл
			Зависимости.Добавить(Зависимость);
		КонецЦикла;
	КонецЕсли;
	
	// Assert
	Утверждения.ПроверитьРавенство(2, Зависимости.Количество(), "Без флага dev должно быть только 2 обычные зависимости");
	
	// Проверяем, что включены только обычные зависимости
	ИменаЗависимостей = Новый Массив;
	Для Каждого Зависимость Из Зависимости Цикл
		ИменаЗависимостей.Добавить(Зависимость.ИмяПакета);
		Утверждения.ПроверитьЛожь(Зависимость.ДляРазработки, "Все включенные зависимости должны быть обычными");
	КонецЦикла;
	
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep1") <> Неопределено, "Должна присутствовать regular-dep1");
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep2") <> Неопределено, "Должна присутствовать regular-dep2");
	Утверждения.ПроверитьРавенство(Неопределено, ИменаЗависимостей.Найти("dev-dep1"), "Не должна присутствовать dev-dep1");
	Утверждения.ПроверитьРавенство(Неопределено, ИменаЗависимостей.Найти("dev-dep2"), "Не должна присутствовать dev-dep2");
	
КонецПроцедуры

Процедура ТестДолжен_ВключатьЗависимостиРазработчикаСФлагом() Экспорт
	
	// Arrange
	Манифест = СоздатьТестовыйМанифест();
	МенеджерУстановки = Новый МенеджерУстановкиПакетов(РежимУстановкиПакетов.Локально);
	МенеджерУстановки.УстанавливатьЗависимостиРазработчика(Истина);
	
	// Act - имитируем логику фильтрации из РазрешитьЗависимостиПакета
	ВсеЗависимости = Манифест.Зависимости();
	УстанавливатьЗависимостиРазработчика = Истина;
	УровеньЗависимости = 0;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ДляРазработки", Ложь);
	
	Зависимости = ВсеЗависимости.НайтиСтроки(Отбор);
	
	Если УстанавливатьЗависимостиРазработчика И УровеньЗависимости = 0 Тогда
		Отбор.ДляРазработки = Истина;
		ЗависимостиРазработчика = ВсеЗависимости.НайтиСтроки(Отбор);
		Для Каждого Зависимость Из ЗависимостиРазработчика Цикл
			Зависимости.Добавить(Зависимость);
		КонецЦикла;
	КонецЕсли;
	
	// Assert
	Утверждения.ПроверитьРавенство(4, Зависимости.Количество(), "С флагом dev должны быть все зависимости");
	
	// Проверяем, что включены все зависимости
	ИменаЗависимостей = Новый Массив;
	Для Каждого Зависимость Из Зависимости Цикл
		ИменаЗависимостей.Добавить(Зависимость.ИмяПакета);
	КонецЦикла;
	
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep1") <> Неопределено, "Должна присутствовать regular-dep1");
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep2") <> Неопределено, "Должна присутствовать regular-dep2");
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("dev-dep1") <> Неопределено, "Должна присутствовать dev-dep1");
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("dev-dep2") <> Неопределено, "Должна присутствовать dev-dep2");
	
КонецПроцедуры

Процедура ТестДолжен_ИсключатьЗависимостиРазработчикаНаВложенныхУровнях() Экспорт
	
	// Arrange
	Манифест = СоздатьТестовыйМанифест();
	
	// Act - имитируем логику фильтрации на уровне 1 (транзитивные зависимости)
	ВсеЗависимости = Манифест.Зависимости();
	УстанавливатьЗависимостиРазработчика = Истина;
	УровеньЗависимости = 1; // Транзитивная зависимость
	
	Отбор = Новый Структура();
	Отбор.Вставить("ДляРазработки", Ложь);
	
	Зависимости = ВсеЗависимости.НайтиСтроки(Отбор);
	
	Если УстанавливатьЗависимостиРазработчика И УровеньЗависимости = 0 Тогда
		Отбор.ДляРазработки = Истина;
		ЗависимостиРазработчика = ВсеЗависимости.НайтиСтроки(Отбор);
		Для Каждого Зависимость Из ЗависимостиРазработчика Цикл
			Зависимости.Добавить(Зависимость);
		КонецЦикла;
	КонецЕсли;
	
	// Assert
	Утверждения.ПроверитьРавенство(2, Зависимости.Количество(), "На уровне 1 dev зависимости не должны устанавливаться");
	
	// Проверяем, что включены только обычные зависимости
	ИменаЗависимостей = Новый Массив;
	Для Каждого Зависимость Из Зависимости Цикл
		ИменаЗависимостей.Добавить(Зависимость.ИмяПакета);
		Утверждения.ПроверитьЛожь(Зависимость.ДляРазработки, "На уровне 1 должны быть только обычные зависимости");
	КонецЦикла;
	
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep1") <> Неопределено, "Должна присутствовать regular-dep1");
	Утверждения.ПроверитьИстину(ИменаЗависимостей.Найти("regular-dep2") <> Неопределено, "Должна присутствовать regular-dep2");
	Утверждения.ПроверитьРавенство(Неопределено, ИменаЗависимостей.Найти("dev-dep1"), "Не должна присутствовать dev-dep1");
	Утверждения.ПроверитьРавенство(Неопределено, ИменаЗависимостей.Найти("dev-dep2"), "Не должна присутствовать dev-dep2");
	
КонецПроцедуры

Процедура ТестДолжен_РаботатьСЛокальнымиЗависимостями() Экспорт
	
	// Arrange
	Манифест = СоздатьТестовыйМанифест();
	МенеджерУстановки = Новый МенеджерУстановкиПакетов(РежимУстановкиПакетов.Локально);
	МенеджерУстановки.УстанавливатьЗависимостиРазработчика(Истина);
	
	// Act - тестируем логику РазрешитьЗависимостиПакетаЛокально
	ВсеЗависимости = Манифест.Зависимости();
	УстанавливатьЗависимостиРазработчика = Истина;
	УровеньЗависимости = 0;
	
	// Применяем ту же логику фильтрации
	Отбор = Новый Структура();
	Отбор.Вставить("ДляРазработки", Ложь);
	
	Зависимости = ВсеЗависимости.НайтиСтроки(Отбор);
	
	Если УстанавливатьЗависимостиРазработчика И УровеньЗависимости = 0 Тогда
		Отбор.ДляРазработки = Истина;
		ЗависимостиРазработчика = ВсеЗависимости.НайтиСтроки(Отбор);
		Для Каждого Зависимость Из ЗависимостиРазработчика Цикл
			Зависимости.Добавить(Зависимость);
		КонецЦикла;
	КонецЕсли;
	
	// Assert
	Утверждения.ПроверитьРавенство(4, Зависимости.Количество(), "Локальные зависимости должны включать все зависимости с флагом dev");
	
	// Проверяем содержимое
	ОбычныеЗависимости = 0;
	ЗависимостиРазработчика = 0;
	
	Для Каждого Зависимость Из Зависимости Цикл
		Если Зависимость.ДляРазработки Тогда
			ЗависимостиРазработчика = ЗависимостиРазработчика + 1;
		Иначе
			ОбычныеЗависимости = ОбычныеЗависимости + 1;
		КонецЕсли;
	КонецЦикла;
	
	Утверждения.ПроверитьРавенство(2, ОбычныеЗависимости, "Должно быть 2 обычные зависимости");
	Утверждения.ПроверитьРавенство(2, ЗависимостиРазработчика, "Должно быть 2 зависимости разработчика");
	
КонецПроцедуры

Логирование.ПолучитьЛог("oscript.app.opm").УстановитьУровень(УровниЛога.Отладка);