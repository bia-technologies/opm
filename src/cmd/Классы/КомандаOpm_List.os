#Использовать fluent
#Использовать logos

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ОписаниеКоманды(Знач КомандаПриложения) Экспорт
	
	КомандаПриложения.Опция("q quiet", Ложь, """Тихий"" режим вывода без лишних сообщений.");
	КомандаПриложения.Опция("r remote", Ложь, "Вывести список пакетов в хабе");
	КомандаПриложения.Опция("a all", Ложь, "Вывести список всех пакетов установленных и доступных в хабе");
	КомандаПриложения.Опция("p path", Ложь, "Выводить путь к пакетам");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт
	
	ТихийРежим = КомандаПриложения.ЗначениеОпции("quiet");
	ВыводВсехПакетов = КомандаПриложения.ЗначениеОпции("all");
	ВыводПакетовНаХабе = КомандаПриложения.ЗначениеОпции("remote") ИЛИ ВыводВсехПакетов;
	ВыводУстановленныхПакетов = НЕ КомандаПриложения.ЗначениеОпции("remote") ИЛИ ВыводВсехПакетов;
	ВыводитьПутьКПакетам = КомандаПриложения.ЗначениеОпции("path");
	
	Если ВыводВсехПакетов Тогда
		
		ТекстСообщения = "Все пакеты, установленные и в хабе:";

	Иначе

		ТекстСообщения = ?(ВыводПакетовНаХабе, "Пакеты в хабе:", "Установленные пакеты:");
		
	КонецЕсли;
	
	МенеджерПолучения = Новый МенеджерПолученияПакетов();
	ДоступныеПакеты = МенеджерПолучения.ПолучитьДоступныеПакеты();
	
	КэшУстановленныхПакетов = Новый КэшУстановленныхПакетов;
	УстановленныеПакеты = КэшУстановленныхПакетов.ПолучитьУстановленныеПакеты();
	
	Если НЕ ТихийРежим Тогда
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	Пакеты = Новый ТаблицаЗначений();
	Пакеты.Колонки.Добавить("ИмяПакета", , "Пакет");
	Пакеты.Колонки.Добавить("ИменаСерверов", , "Имена серверов");
	Пакеты.Колонки.Добавить("Версия", , "Версия");
	Пакеты.Колонки.Добавить("Выводить", , "");
	Пакеты.Колонки.Добавить("КаталогПакета", , ?(ВыводитьПутьКПакетам, "Каталог пакета", ""));
	
	Для Каждого ДоступныйПакет Из ДоступныеПакеты Цикл

		ИнфоОПакете = Пакеты.Добавить();
		ИнфоОПакете.ИмяПакета = ДоступныйПакет.Ключ;
		ИнфоОПакете.Версия = "";
		ИнфоОПакете.Выводить = ВыводПакетовНаХабе;

		ИменаСерверов = "";
		Для Каждого к из ДоступныйПакет.Значение Цикл
			ИменаСерверов = ИменаСерверов + ?(ПустаяСтрока(ИменаСерверов), "", ", ") + к.Ключ;
		КонецЦикла;
		
		ИнфоОПакете.ИменаСерверов = ИменаСерверов;
	
	КонецЦикла;

	Для Каждого УстановленныйПакет Из УстановленныеПакеты Цикл

		ИмяПакета = УстановленныйПакет.Ключ;
		ОписаниеПакета = УстановленныйПакет.Значение.МетаданныеПакета;
		Версия = "<НЕТ>";
		Если ТипЗнч(ОписаниеПакета) <> Тип("Булево") Тогда
			Версия = ОписаниеПакета.Свойства().Версия;
		КонецЕсли;
		
		ДобавленныйПакет = Пакеты.НайтиСтроки(Новый Структура("ИмяПакета", ИмяПакета));
		Если ЗначениеЗаполнено(ДобавленныйПакет) Тогда
			ИнфоОПакете = ДобавленныйПакет[0];
			ИнфоОПакете.Выводить = Истина; // Пакет есть и на хабе и локально, стоит вывести
		Иначе
			ИнфоОПакете = Пакеты.Добавить();
			ИнфоОПакете.ИмяПакета = ИмяПакета;
			ИнфоОПакете.Выводить = ВыводУстановленныхПакетов;
			ИнфоОПакете.ИменаСерверов = "Локальный";
		КонецЕсли;

		ИнфоОПакете.Версия = Версия;
		ИнфоОПакете.КаталогПакета = УстановленныйПакет.Значение.КаталогПакета;
	
	КонецЦикла;
	
	Пакеты = ПроцессорыКоллекций.ИзКоллекции(Пакеты)
		.СортироватьПо("ИмяПакета", "(Первый, Второй) -> 
		|	ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок().Выполнить(НРег(Первый), НРег(Второй));"
		)
		.Получить(Тип("ТаблицаЗначений"));
	
	ВывестиИнформациюОПакетах(Пакеты);
	
КонецПроцедуры

Процедура ВывестиИнформациюОПакетах(Знач Пакеты)

	Длины = Новый Массив;
	Для НомерКолонки = 0 По Пакеты.Колонки.Количество() - 1 Цикл
		Длины.Добавить(СтрДлина(Пакеты.Колонки[НомерКолонки].Заголовок));
	КонецЦикла;

	Для Каждого ИнфоОПакете Из Пакеты Цикл
		
		Если НЕ ИнфоОПакете.Выводить Тогда
			Продолжить;
		КонецЕсли;

		Для НомерКолонки = 0 По Пакеты.Колонки.Количество() - 1 Цикл
			
			Колонка = Пакеты.Колонки[НомерКолонки];
			Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
				Длины[НомерКолонки] = Макс(СтрДлина(ИнфоОПакете[Колонка.Имя]), Длины[НомерКолонки]);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ВывестиШапкуИнфо(Пакеты, Длины);
	Для Каждого ИнфоОПакете Из Пакеты Цикл

		Если НЕ ИнфоОПакете.Выводить Тогда
			Продолжить;
		КонецЕсли;
		
		ВывестиСтрокуИнфо(ИнфоОПакете, Длины);
		
	КонецЦикла;
	ВывестиШапкуИнфо(Пакеты, Длины);

КонецПроцедуры

Процедура ВывестиШапкуИнфо(Знач Пакеты, Знач Длины)

	ПодстрокаРазделитель = " |";

	ОбщаяДлина = 0;
	Для Каждого мДлина Из Длины Цикл

		Если мДлина <> 0 Тогда
			ОбщаяДлина = ОбщаяДлина + мДлина + СтрДлина(ПодстрокаРазделитель);
		КонецЕсли;

	КонецЦикла;
	
	ПустаяСтрока = ШаблоннаяСтрока();
	СтрокаОтрез = СтрЗаменить(Лев(ПустаяСтрока, ОбщаяДлина), " ", "-");
	Сообщить(СтрокаОтрез);

	ПодстрокиСообщения = Новый Массив;
	Для НомерКолонки = 0 По Пакеты.Колонки.Количество() - 1 Цикл
		
		Колонка = Пакеты.Колонки[НомерКолонки];
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			КоличествоСимволовДобора = Длины[НомерКолонки] - СтрДлина(Колонка.Заголовок);
			ПодстрокиСообщения.Добавить(Колонка.Заголовок + Лев(ПустаяСтрока, КоличествоСимволовДобора));
		КонецЕсли;

	КонецЦикла;
	Сообщить(СтрСоединить(ПодстрокиСообщения, ПодстрокаРазделитель));
	Сообщить(СтрокаОтрез);

КонецПроцедуры

Процедура ВывестиСтрокуИнфо(Знач ИнфоОПакете, Знач Длины)

	Пакеты = ИнфоОПакете.Владелец();

	ПодстрокаРазделитель = " |";

	ОбщаяДлина = 0;
	Для Каждого мДлина Из Длины Цикл

		Если мДлина <> 0 Тогда
			ОбщаяДлина = ОбщаяДлина + мДлина + СтрДлина(ПодстрокаРазделитель);
		КонецЕсли;

	КонецЦикла;
	
	ПустаяСтрока = ШаблоннаяСтрока();

	ПодстрокиСообщения = Новый Массив;
	Для НомерКолонки = 0 По Пакеты.Колонки.Количество() - 1 Цикл
		
		Колонка = Пакеты.Колонки[НомерКолонки];
		Если ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			ВыводимоеЗначение = Строка(ИнфоОПакете[Колонка.Имя]);
			КоличествоСимволовДобора = Длины[НомерКолонки] - СтрДлина(ВыводимоеЗначение);
			ПодстрокиСообщения.Добавить(ВыводимоеЗначение + Лев(ПустаяСтрока, КоличествоСимволовДобора));
		КонецЕсли;

	КонецЦикла;
	Сообщить(СтрСоединить(ПодстрокиСообщения, ПодстрокаРазделитель));

КонецПроцедуры

Функция ШаблоннаяСтрока()
	Возврат "                                                                                                        "
		+ "                                                                                                        "
	;
КонецФункции

Лог = Логирование.ПолучитьЛог(КонстантыOpm.ИмяЛога);