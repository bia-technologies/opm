
#Использовать fs
#Использовать logos
#Использовать semver

Перем Лог;

Перем КаталогПоискаБиблиотек;

Перем УстановленныеПакеты;

Функция ПакетУстановлен(Знач ОписаниеЗависимости, Знач КаталогПоискаБиблиотек = "") Экспорт
	
	Перем УстановленныеПакеты;
	УстановленныеПакеты = ПолучитьУстановленныеПакеты();
	
	ДанныеПакета = УстановленныеПакеты.Получить(ОписаниеЗависимости.ИмяПакета);
	ПакетУстановлен = ДанныеПакета <> Неопределено;
	Если ПакетУстановлен И НЕ ПустаяСтрока(КаталогПоискаБиблиотек) Тогда
		КаталогБиблиотекПакета = Новый Файл(ОбъединитьПути(ДанныеПакета.КаталогПакета, "..")).ПолноеИмя;
		ПакетУстановлен = ФС.ПутиРавны(КаталогБиблиотекПакета, КаталогПоискаБиблиотек);
	КонецЕсли;

	ПутьКФайлуМетаданных = ПолучитьПутьКФайлуМетаданныхБиблиотеки(ОписаниеЗависимости.ИмяПакета);
	
	ФайлМетаданных = Новый Файл(ПутьКФайлуМетаданных);
	Если ФайлМетаданных.Существует() Тогда	
		МетаОписаниеПакета = РаботаСПакетами.ПрочитатьМетаданныеПакета(ПутьКФайлуМетаданных);
		УстановленнаяВерсия = МетаОписаниеПакета.Свойства().Версия;	
	Иначе
		// @deprecated
		УстановленнаяВерсия = "0";
	КонецЕсли;
	Лог.Отладка("ПакетУстановлен: Перед вызовом СравнитьВерсии(ЭтаВерсия = <%1>, БольшеЧемВерсия = <%2>)", УстановленнаяВерсия, ОписаниеЗависимости.МинимальнаяВерсия);
	
	ВерсияSNAPSHOT = "SNAPSHOT";
	Если ОписаниеЗависимости.МинимальнаяВерсия = ВерсияSNAPSHOT И УстановленнаяВерсия = ВерсияSNAPSHOT Тогда
		УстановленаКорректнаяВерсия = Истина;
	ИначеЕсли ОписаниеЗависимости.МинимальнаяВерсия = ВерсияSNAPSHOT И УстановленнаяВерсия <> ВерсияSNAPSHOT Тогда
		УстановленаКорректнаяВерсия = Ложь;
	Иначе
		УстановленаКорректнаяВерсия = ОписаниеЗависимости.МинимальнаяВерсия = Неопределено
			ИЛИ Версии.СравнитьВерсии(УстановленнаяВерсия, ОписаниеЗависимости.МинимальнаяВерсия) >= 0;
	КонецЕсли;
		
	Лог.Отладка("Пакет установлен: " + ПакетУстановлен);
	Лог.Отладка("Установлена корректная версия: " + УстановленаКорректнаяВерсия);
	Возврат ПакетУстановлен И УстановленаКорректнаяВерсия;
	
КонецФункции

Процедура Обновить() Экспорт
	
	УстановленныеПакеты = Новый Соответствие;
	НайденныеФайлы = НайтиФайлы(КаталогПоискаБиблиотек, ПолучитьМаскуВсеФайлы());

	Для Каждого ФайлКаталога Из НайденныеФайлы Цикл
		Если ФайлКаталога.ЭтоКаталог() Тогда

			// ДобавитьУстановленныйПакет заменит уже добавленный пакет при совпадении имён
			// Соответственно, более поздние каталоги будут иметь приоритет
			ДобавитьУстановленныйПакет(ФайлКаталога);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьУстановленныеПакеты() Экспорт

	Если УстановленныеПакеты = Неопределено Тогда
		Обновить();
	КонецЕсли;

	Возврат УстановленныеПакеты;

КонецФункции

Процедура ДобавитьУстановленныйПакет(Знач ФайлКаталога)
	
	ПутьКФайлуМетаданных = ОбъединитьПути(ФайлКаталога.ПолноеИмя, КонстантыOpm.ИмяФайлаМетаданныхПакета);
	ФайлМетаданных = Новый Файл(ПутьКФайлуМетаданных);
	Если ФайлМетаданных.Существует() Тогда	
		МетаОписаниеПакета = РаботаСПакетами.ПрочитатьМетаданныеПакета(ПутьКФайлуМетаданных);	
	Иначе
		// @deprecated
		МетаОписаниеПакета = Истина;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("МетаданныеПакета", МетаОписаниеПакета);
	СтруктураДанных.Вставить("КаталогПакета", ФайлКаталога.ПолноеИмя);

	УстановленныеПакеты.Вставить(ФайлКаталога.Имя, СтруктураДанных);
	
КонецПроцедуры

Функция ПолучитьПутьКФайлуМетаданныхБиблиотеки(ИмяПакета) Экспорт

	ПутьКФайлуМетаданных = "";
	ВремПутьКФайлуМетаданных = ОбъединитьПути(
		КаталогПоискаБиблиотек,
		ИмяПакета,
		КонстантыOpm.ИмяФайлаМетаданныхПакета
	);

	Лог.Отладка(Новый Файл(ВремПутьКФайлуМетаданных).ПолноеИмя);
	Если ФС.ФайлСуществует(ВремПутьКФайлуМетаданных) Тогда
		ПутьКФайлуМетаданных = ВремПутьКФайлуМетаданных;
	КонецЕсли;
	
	Возврат ПутьКФайлуМетаданных;
	
КонецФункции

Процедура ПриСозданииОбъекта(Знач ЦелевойКаталогСкачиванияБиблиотек)
	
	Лог = Логирование.ПолучитьЛог("oscript.app.opm");
	КаталогПоискаБиблиотек = ЦелевойКаталогСкачиванияБиблиотек;

КонецПроцедуры
