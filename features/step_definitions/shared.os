// Реализация шагов BDD-фич/сценариев с помощью фреймворка https://github.com/artbear/1bdd
#Использовать tempfiles

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойНЕСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ЯДобавляюПараметрыДляКоманды");
	ВсеШаги.Добавить("ЯДобавляюОпциюДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯДобавляюАргументДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯУстанавливаюПеременнуюОкруженияИзПеременной");
	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной");
	ВсеШаги.Добавить("ЯСоздаюТестовыйПакетСЗависимостямиРазработчикаВПеременной");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт

КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

КонецПроцедуры

//Я создаю временный каталог и сохраняю его в переменной "КаталогПлагинов"
Процедура ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной(Знач ИмяПеременной) Экспорт

	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);

КонецПроцедуры

//Я устанавливаю переменную окружения "GITSYNC_STORAGE_PATH" из переменной "КаталогХранилища1С"
Процедура ЯУстанавливаюПеременнуюОкруженияИзПеременной(Знач ИмяПеременной, Знач КаталогХранилища1С) Экспорт

	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(КаталогХранилища1С);
	УстановитьПеременнуюСреды(ИмяПеременной, ЗначениеПеременной);

КонецПроцедуры

//Я добавляю позиционный параметр для команды "gitsync" из переменной "URLРепозитория"
Процедура ЯДобавляюАргументДляКомандыИзПеременной(Знач ИмяКоманды, Знач ИмяПеременной) Экспорт

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);

	Команда.ДобавитьПараметр(ЗначениеПеременной);

КонецПроцедуры

//Я добавляю параметр "-tmpdir" для команды "gitsync" из переменной "ВременнаяДиректория"
Процедура ЯДобавляюОпциюДляКомандыИзПеременной(Знач Параметр, Знач ИмяКоманды, Знач ИмяПеременной) Экспорт
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	Команда.ДобавитьПараметр(СтрШаблон("%1 %2", Параметр, ЗначениеПеременной));
КонецПроцедуры

//Я добавляю параметры для команды "gitsync"
//|--storage-user Администратор|
//|-useVendorUnload|
Процедура ЯДобавляюПараметрыДляКоманды(Знач ИмяКоманды, Знач ТаблицаПараметров) Экспорт

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Для Каждого Параметр из ТаблицаПараметров Цикл
		Команда.ДобавитьПараметр(Параметр[0])
	КонецЦикла

КонецПроцедуры


//Я устанавливаю путь выполнения команды "gitsync" к текущей библиотеке
Процедура ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке(Знач ИмяКоманды) Экспорт

	ПутьКПриложению = ПутьКИсполняемомуФайлу();
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Команда.УстановитьКоманду("oscript");

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	Если Не ЭтоWindows Тогда
		Команда.ДобавитьПараметр("-encoding=utf-8");
	КонецЕсли;

	Команда.ДобавитьПараметр(ОбернутьВКавычки(ПутьКПриложению));

КонецПроцедуры

//В каталоге из переменной "ПутьКаталогаИсходников" создается файл или каталог "AUTHORS"
Процедура ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог(Знач ПутьКаталогаИсходников, Знач ИмяФайла) Экспорт

	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ИскомыйФайл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
	Ожидаем.Что(ИскомыйФайл.Существует(), "Файл должен был существовать").ЭтоИстина();

КонецПроцедуры

Функция КлючКоманды(Знач ИмяКоманды)
	Возврат "Команда-" + ИмяКоманды;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Функция ПутьКИсполняемомуФайлу()

	Возврат ОбъединитьПути(КаталогБиблиотеки(), "src", "cmd", "opm.os");

КонецФункции

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогБиблиотеки(), "tests", "fixtures");
КонецФункции

Функция КаталогБиблиотеки()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..");
КонецФункции

//В каталоге из переменной "РабочийКаталог" НЕ создается файл или каталог "oscript_modules/asserts"
Процедура ВКаталогеИзПеременнойНЕСоздаетсяФайлИлиКаталог(Знач ИмяПеременной, Знач ОтносительныйПуть) Экспорт
	
	Каталог = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	ПолныйПуть = ОбъединитьПути(Каталог, ОтносительныйПуть);
	
	ФайлИлиКаталог = Новый Файл(ПолныйПуть);
	Если ФайлИлиКаталог.Существует() Тогда
		ВызватьИсключение СтрШаблон("Файл или каталог <%1> не должен существовать, но он существует", ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

//Я создаю тестовый пакет с зависимостями разработчика в переменной "РабочийКаталог"
Процедура ЯСоздаюТестовыйПакетСЗависимостямиРазработчикаВПеременной(Знач ИмяПеременной) Экспорт
	
	КаталогПакета = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	
	// Создаем packagedef с зависимостями разработчика
	СодержимоеPackagedef = 
	"Описание.Имя(""test-dev-deps"")
	|    .Версия(""1.0.0"")
	|    .ВерсияСреды(""1.9.2"")
	|    .ЗависитОт(""strings"", ""0.5.0"")
	|    .РазработкаЗависитОт(""asserts"", ""1.4.0"")
	|    .РазработкаЗависитОт(""1bdd"", ""1.15.1"")
	|    .ВключитьФайл(""src"");";
	
	ФайлPackagedef = ОбъединитьПути(КаталогПакета, "packagedef");
	ЗаписьТекста = Новый ЗаписьТекста(ФайлPackagedef, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(СодержимоеPackagedef);
	ЗаписьТекста.Закрыть();
	
	// Создаем каталог src с тестовым файлом
	КаталогSrc = ОбъединитьПути(КаталогПакета, "src");
	СоздатьКаталог(КаталогSrc);
	
	ФайлТеста = ОбъединитьПути(КаталогSrc, "test.os");
	ЗаписьТекста = Новый ЗаписьТекста(ФайлТеста, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать("Процедура ТестоваяПроцедура() Экспорт" + Символы.ПС + "КонецПроцедуры");
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры
